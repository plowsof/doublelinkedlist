
//query db 
function python_db_init()
{

    sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_map_begin "pydb_map_begin"
    sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_begin "pydb_player_join"
    sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_disconnect "pydb_player_leave"
    sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_userinfo_change "pydb_userinfo_change"
    //sp_sc_func_exec registerSounds
}
function pydb_player_leave(*)
{
    set ~slot $~1
    sp_sc_func_exec sound_disconnect $~slot
}
function pydb_userinfo_change(~slot)
{
  //treat a name change like a new player connected
  //this will zero/set all cvars
  sp_sv_info_client $~slot
  sp_sc_flow_if text cvar _sp_sv_info_client_name != cvar pydb_surf_name_join_$~slot
  {
    sp_sc_func_exec pydb_player_join $~slot
  }
}

function pydb_map_begin()
{
    //load pickled python dictionary for this map
    sp_sc_func_exec set_map #_sp_sv_info_map_current
    sp_sc_func_exec trigga
    sp_sc_func_exec registerSounds
    sp_sc_func_exec pydb_make_top10

}

function trigga(*)
{
  set _sf_sv_debug_triggers 0
  set _sp_sv_limit_speed 0
  //this will be a while loop in the end
  //spawn 4 gates... seperate tuid's and origins 
  //echo "Spawn Trigger"
  set ~origin "0:3585:-578";set ~size "0:280:340:0:-280:0";set ~callback "pydb_surf_callback";set ~type "touch";set ~tuid "1"
  sp_sc_func_exec spawn_a_trigger #~origin #~size #~callback #~type #~tuid 
  set ~origin "5:1026:-183";set ~size "0:280:340:0:-280:0";set ~callback "pydb_surf_callback";set ~type "touch";set ~tuid "4"
  sp_sc_func_exec spawn_a_trigger #~origin #~size #~callback #~type #~tuid 
  set ~origin "0:-1023:-562";set ~size "0:280:340:0:-280:0";set ~callback "pydb_surf_callback";set ~type "touch";set ~tuid "3"
  sp_sc_func_exec spawn_a_trigger #~origin #~size #~callback #~type #~tuid 
  set ~origin "-11:1025:-973";set ~size "0:280:340:0:-280:0";set ~callback "pydb_surf_callback";set ~type "touch";set ~tuid "2"
  sp_sc_func_exec spawn_a_trigger #~origin #~size #~callback #~type #~tuid 
  //sf_sv_ent_create ~ent
  //trigger uid
  //~uid = "global_tuid_123412414 gate1"
  //set GLOBAL_tuid_$~ent #~tuid
  //set GLOBAL_gate_$~tuid #~ent

  //set GLOBAL_gate_1 "000000001"
  //set GLOBAL_gate_2 "000000002"
  //set GLOBAL_gate_3 "000000003"
  //set GLOBAL_gate_4 "000000004"
  //set GLOBAL_tuid_000000001 1
  //set GLOBAL_tuid_000000002 2
  //set GLOBAL_tuid_000000003 3
  //set GLOBAL_tuid_000000004 4
  //set GLOBAL_total_triggers 4

}

function devkit()
{
    sp_sc_func_exec debug_do_lap 0 28
    //sp_sc_func_exec debug_do_lap 1 20
    //sp_sc_func_exec debug_do_lap 2 10
    //sp_sc_func_exec debug_do_lap 2 9
    //sp_sc_func_exec debug_do_lap 1 8
    //sp_sc_func_exec debug_do_lap 0 6
}
function debug_do_lap(~slot,~time)
{
    sp_sc_cvar_math_mul ~time 1000
    sp_sc_func_exec why_broken 000000001 $~slot
    sp_sc_func_exec why_broken 000000002 $~slot
    sp_sc_func_exec why_broken 000000003 $~slot
    sp_sc_func_exec why_broken 000000004 $~slot
    sset ~msg sp_sc_func_exec why_broken 000000001 $~slot
    sp_sc_timer $~time #~msg
}

function .rank(~slot)
{
    sp_sc_cvar_copy ~rank pydb_surf_rank_$~slot
    sset ~msg You are ranked $~rank
    say #~msg
    sp_sc_cvar_list pydb_surf_*_$~slot
    //python will make a .cfg with above 
    //set pydb_surf_spb_$pydb_slot 0
    //set pydb_surf_pb_$pydb_slot $pydb_pb
    //set pydb_surf_rank_$pydb_slot $pydb_rank
    //set pydb_surf_s1_$pydb_slot $pydb_s1
    //set pydb_surf_s2_$pydb_slot $pydb_s2
    //set pydb_surf_s3_$pydb_slot $pydb_s3
    //set pydb_surf_s4_$pydb_slot $pydb_s4
    //set pydb_surf_total_$pydb_slot $pydb_total
    //set pydb_++ 0; add pydb_++ $pydb_s1;add pydb_++ $pydb_s2;add pydb_++ $pydb_s3; add pydb_++ $pydb_s4
    //set pydb_surf_++_$pydb_slot $~++
}

//build top10 cvars
function pydb_make_top10()
{
    //cfg_name = "top10-" + mapname + ".cfg"
    set ~counter 1
    sp_sc_flow_while number cvar ~counter <= cvar 10
    {
      zero pydb_data_$~counter
      add ~counter 1
    }
    sp_sc_cvar_sset ~cfg "sofplus/data/race/top10-" #GLOBAL_pydb_mapname ".cfg" 
    sp_sc_exec_file #~cfg
}
//print cvars
function .top10(~slot)
{
  set ~counter 1
  echo "hello world"
  set ~counter 1
  sp_sc_flow_while number cvar ~counter <= val 10
  {
    sp_sc_flow_if text cvar pydb_data_$~counter != val ""
    {
      //its set with data
      sp_sc_cvar_copy ~data pydb_data_$~counter
      sp_sc_cvar_split ~split "\" ~data
      set ~name $~split_1
      set ~time $~split_2
      set ~last_seen $~split_3
      sp_sc_cvar_unhex ~name ~name
      sset ~msg Name: $~name Time: $~time Lastseen: $~last_seen
      echo #~msg
    }
    add ~counter 1
  }
}

function pydb_set_name(~name,~slot,~return_to)
{
    sp_sc_cvar_no_color ~name ~name
    //remove spaces and .lower()
    sp_sc_cvar_replace ~name ~name %20: %41-%5a:%61-%7a
    sp_sc_flow_if text cvar ~name == val ""
    {
    set ~name "anonymous"
    }
    sp_sc_cvar_hex ~fname ~name
    sp_sc_func_exec $~return_to #~fname #~slot "~"
}

function pydb_handle_finish(*)
{
  sp_sc_flow_if number cvar ~0 == val 1
  {
    set ~slot $~1
    sp_sv_info_client $~slot
    sp_sc_func_exec pydb_set_name #_sp_sv_info_client_name #~slot "pydb_handle_finish"
  }
  else
  {
    //we have the name
    set ~name #~1
    set ~slot #~2
    //time is diff between when we 1st touched 1
    sp_sc_cvar_copy ~time pydb_surf_pb_$~slot
    sp_sc_cvar_copy ~s1 pydb_surf_s1_$~slot
    sp_sc_cvar_copy ~s2 pydb_surf_s2_$~slot
    sp_sc_cvar_copy ~s3 pydb_surf_s3_$~slot
    sp_sc_cvar_copy ~s4 pydb_surf_s4_$~slot
    sp_sc_cvar_copy ~spb pydb_surf_spb_$~slot
    sp_sc_func_exec timed_event_completed #~name #~time #~spb #~s1 #~s2 #~s3 #~s4 #~slot

  }
}

//
// echo lines to sof.log for python parser
//
function timed_event_completed(~name,~time,~spb,~s1,~s2,~s3,~s4,~slot)
{
    sp_sc_cvar_sset ~line [%22\\surf_db\\%22,%22total_laps%22,%22 $~name %22,%22 $~time %22,%22 $~spb %22,%22 $~s1 %22,%22 $~s2 %22,%22 $~s3 %22,%22 $~s4 %22,%22 $~slot %22]
    sp_sc_cvar_unescape ~line ~line
    echo $~line
    sp_sc_flow_if number cvar pydb_surf_rank_$~slot <= val 10
    {
      sp_sc_func_exec pydb_make_top10
    }
}

function set_map(~mapname)
{
    //bug of map change during run
    sp_sv_info_frames
    sp_sc_cvar_split ~split "/" ~mapname
    set ~mapname $~split_2
    set GLOBAL_pydb_mapname #~mapname
    sp_sc_cvar_sset ~msg [%22\\surf_db\\%22,%22map_change%22,%22 $~mapname %22]
    sp_sc_cvar_unescape ~msg ~msg
    echo $~msg
    sp_sc_func_exec pydb_make_top10
}

function pydb_player_join(*)
{
    echo "joined"
    sp_sc_cvar_list ~*
    sp_sc_flow_if number cvar ~0 == val 1
    {
        //clear touched cvars
        sp_sc_func_exec pydb_zero_touch_times $~1
        sp_sv_info_client $~1
        set ~name #_sp_sv_info_client_name
        set pydb_surf_name_join_$~1 #~name
        sp_sc_func_exec pydb_set_name #~name #~1 "pydb_player_join"
        sp_sc_func_exec sound_begin $~1
    }
    else
    {
        set ~name #~1
        set ~slot #~2
        sp_sc_cvar_sset ~msg [%22\\surf_db\\%22,%22join%22,%22 $~name %22,%22 $~slot %22]
        sp_sc_cvar_unescape ~msg ~msg
        echo $~msg
    }
}


function pydb_zero_touch_times(~slot)
{
  echo zero times
  sp_sc_cvar_list ~slot
  //zero section times
  set ~counter 1
  sp_sc_cvar_find ~tmp touched_trigger_*_$~slot
  sp_sc_flow_while number cvar ~counter <= cvar ~tmp_0
  {
    sp_sc_cvar_copy ~ok ~tmp_$~counter
    zero $~ok
    add ~counter 1
  }
  zero touched_trigger_last_$~slot 
  sp_sc_cvar_list touched_trigger_*_$~slot
}

//
// func for python's udp packet to run
//

function broadcast_new_rank(pydb_name,pydb_new_rank,pydb_slot,pydb_broadcast)
{
  sp_sc_flow_if number cvar pydb_broadcast == val 1
  {
    //~temp cvars are deleted when rcon status packet calls this function
    sset ~msg $pydb_name is now number $pydb_new_rank
    echo #~msg
  }
  set pydb_surf_rank_$pydb_slot $pydb_new_rank
}

function pydb_set_begin_cvars(pydb_slot,pydb_pb,pydb_rank,pydb_s1,pydb_s2,pydb_s3,pydb_s4,pydb_total,pydb_first,pydb_last)
{
  sp_sv_info_client $pydb_slot
  sset ~msg Welcome #_sp_sv_info_client_name who is ranked < #pydb_rank >
  say #~msg
  //
  //~rank = unranked until you complete the course
  //starting values are 999~
  set pydb_surf_spb_$pydb_slot 0
  set pydb_surf_pb_$pydb_slot $pydb_pb
  set pydb_surf_rank_$pydb_slot $pydb_rank
  set pydb_surf_s1_$pydb_slot $pydb_s1
  set pydb_surf_s2_$pydb_slot $pydb_s2
  set pydb_surf_s3_$pydb_slot $pydb_s3
  set pydb_surf_s4_$pydb_slot $pydb_s4
  set pydb_surf_total_$pydb_slot $pydb_total
  set pydb_++ 0; add pydb_++ $pydb_s1;add pydb_++ $pydb_s2;add pydb_++ $pydb_s3; add pydb_++ $pydb_s4
  set pydb_surf_++_$pydb_slot $~++
  sp_sc_func_exec pydb_zero_touch_times $pydb_slot
}

function slot_is_valid(~num)
{
  set GLOBAL_slot_valid 0
  sp_sc_flow_if number cvar ~slot < cvar maxclients
  {
    sp_sc_flow_if number cvar ~slot > val -1
    {
      set GLOBAL_slot_valid 1
    }
  }
}
//call back function
function pydb_surf_callback(*)
{
  sp_sc_func_exec ent_get_skinnum #~2
  set ~slot #GLOBAL_skinnum
  set ~ent #~1
  sp_sc_func_exec slot_is_valid $~slot
  //sp_sc_cvar_list ~slot ~ent
  sp_sc_flow_if number cvar GLOBAL_slot_valid == val 1
  {
    sp_sc_cvar_sset ~value "touched_trigger_" $~ent "_" $~slot
    sp_sc_cvar_copy ~tmp $~value
    sp_sc_cvar_copy ~gate GLOBAL_tuid_$~ent
    //sp_sc_cvar_list ~ent ~tmp ~gate
    sp_sc_flow_if text cvar ~tmp == val ""
    {
      //first time we've touched this trigger
      sp_sv_info_frames
      set ~now #_sp_sv_info_frames
      set $~value #~now //set value server frames
      //gate = number
      sp_sc_flow_if text cvar ~gate == val "1"
      {
        say "begin(((((((((((((((((((((("
        sp_sc_func_exec pydb_zero_touch_times $~slot
        sp_sc_cvar_sset ~tmp touched_trigger_$~ent _ $~slot
        set $~tmp #~now
        set touched_trigger_last_$~slot 1
        set pydb_surf_spb_$~slot 0
        //first time we've touched trigger 1
        //sp_sc_func_exec race_time_score_loop $~slot $~2
      }
      else
      {
        sp_sc_func_exec set_section_time #~slot #~gate #~now
      }
    }
    else
    {
      sp_sc_flow_if text cvar ~gate == val "1"
      {
        set ~touched_all 1
        set ~counter 1
        sp_sc_cvar_find ~tmp touched_trigger_*_$~slot
        sp_sc_flow_while number cvar ~counter <= cvar ~tmp_0
        {
          sp_sc_cvar_copy ~ok ~tmp_$~counter
          sp_sc_flow_if text cvar $~ok == val ""
          {
            set ~touched_all 0 
          }
          add ~counter 1
        }
        sp_sc_cvar_list ~touched_all
        sp_sc_flow_if number cvar ~touched_all == val 1
        {
          sp_sc_flow_if number cvar touched_trigger_last_$~slot == val 4
          {
            add pydb_surf_total_$~slot 1
            //touched all and previous = 4. finished
            sp_sv_info_frames
            //~tmp1 = start time 
            sp_sc_cvar_sset ~time_touched_1 touched_trigger_$GLOBAL_gate_1 _$~slot
            sp_sc_cvar_copy ~time_touched_1 $~time_touched_1
            set ~now $_sp_sv_info_frames
            add ~now -$~time_touched_1
            set ~lap_time $~now
            say completed in $~lap_time frames gj
            //sp_sc_cvar_substr ~time ~now 0 4
            sp_sc_flow_if number cvar ~lap_time < cvar pydb_surf_pb_$~slot
            {
              set pydb_surf_pb_$~slot #~lap_time 
              sp_sc_func_exec sound_pb #~slot
            }
            else
            {
              //normal lap end sound
              sp_sc_func_exec sound_lap_end #~slot
            }
            sp_sc_func_exec set_section_time #~slot #~gate $_sp_sv_info_frames
            sp_sc_func_exec pydb_handle_finish $~slot 
            sp_sc_func_exec pydb_zero_touch_times $~slot
            sp_sc_cvar_sset ~tmp touched_trigger_$~ent _ $~slot
            set $~tmp #_sp_sv_info_frames
            set touched_trigger_last_$~slot 1
            set pydb_surf_spb_$~slot 0
          }
        }
      }
    }
    set touched_trigger_last_$~slot $~gate
  }
}

//set touched_trigger_000000004_0 "1740"
//set touched_trigger_000000003_0 "1690"
//set touched_trigger_000000002_0 "1640"
//set touched_trigger_last_0 "1"
//set touched_trigger_""_0 ""
//set touched_trigger_000000001_0 "2799"
function set_section_time(~slot,~gate,~now)
{
  //"touched_trigger_" $~prev_ent "_" $~slot
  echo "section time"
  sp_sc_cvar_list ~slot ~gate ~now
  sp_sc_flow_if number cvar ~gate == val 1
  {
    set ~prev 4
  }
  else
  {
    set ~prev #~gate
    add ~prev -1 
  }
  //if the last gate we touched is == to prev - continue, else we're backwards
  //last touched = 1 
  //we touch 4
  //last touch should be == 
  sp_sc_cvar_list touched_trigger_last_?
  sp_sc_flow_if number cvar ~prev != cvar touched_trigger_last_$~slot
  {
    say "you're going backwards lol"
  }
  else
  {
    sp_sc_cvar_copy ~prev_ent GLOBAL_gate_$~prev
    sp_sc_cvar_sset ~tmp "touched_trigger_" $~prev_ent "_" $~slot

    sp_sc_cvar_copy ~time_prev $~tmp
    add ~now -$~time_prev
    //
    sset ~msg we touched prev gate $~now frames ago
    echo #~msg

    sp_sc_cvar_sset ~pb_s_time "pydb_surf_s" $~gate "_" $~slot
    sp_sc_cvar_copy ~saved_s_time $~pb_s_time
    sp_sc_cvar_list ~saved_s_time ~now
    sp_sc_flow_if number cvar ~now < cvar ~saved_s_time
    {
      set pydb_surf_spb_$~slot 1
      set $~pb_s_time #~now
      sf_sv_player_paint #~slot 0 1 0 1
      sset ~cmd sf_sv_player_paint #~slot 1 1 1 1 
      sp_sc_timer 130 #~cmd
      //special noise
      sp_sc_func_exec sound_section_pb #~slot
      sp_sc_cvar_math_sub ~saved_s_time $~now
      //sp_sc_func_exec frames_to_seconds $~val
      //sp_sc_cvar_sset ~msg "%03-" $GLOBAL_ftos
      sp_sc_cvar_sset ~msg "%03-" $~saved_s_time
    }
    else
    {
      sp_sc_flow_if number cvar ~now == cvar ~saved_s_time
      {
        sf_sv_player_paint #~slot 0 0 1 1
        sset ~cmd sf_sv_player_paint #~slot 1 1 1 1 
        sp_sc_timer 130 #~cmd
        sp_sc_cvar_sset ~msg "%03=="
      }
      else
      {
        //its slow
        sf_sv_player_paint #~slot 1 0 0 1
        sset ~cmd sf_sv_player_paint #~slot 1 1 1 1 
        sp_sc_timer 130 #~cmd
        sp_sc_cvar_math_sub ~now $~saved_s_time 
        //sp_sc_func_exec frames_to_seconds $~now
        //sp_sc_cvar_sset ~msg "%02+" $GLOBAL_ftos
        sp_sc_cvar_sset ~msg "%02+" $~now
      }
      //normal noise
      sp_sc_func_exec sound_section #~slot
      set ~frames $~val
    }
    sp_sc_cvar_unescape ~msg ~msg
    //sp_sv_print_sp_client $~slot 56 #~msg
    echo #~msg
  }
}
//-------------------------
//Some sound stuff
//-------------------------
function registerSounds()
{
  sf_sv_sound_register "weapons/mpg/Pullout.wav" //con
  sf_sv_sound_register "weapons/mpg/out.wav" //disc
  sf_sv_sound_register "dm/assassin/KillTarget.wav" //pb section
  sf_sv_sound_register "dm/assassin/BadKill.wav" //section 
  sf_sv_sound_register "dm/ctf/FlagBase.wav" //lap end
  sf_sv_sound_register "dm/arsenal/BigWinner.wav" //pb
}
function entSoundPlay(~slot,~sound,~atten,~clbool,~vol)
{
  sf_sv_player_ent ~ent #~slot
  sf_sv_sound_play_ent #~sound #~ent 0 #~vol #~atten #~clbool
}
function .stest(*)
{
    sp_sc_func_exec sound_begin 0
}
function sound_begin(~slot)
{
  set ~sound "weapons/mpg/Pullout.wav"
  sp_sc_func_exec sound_play_exclude #~slot #~sound
}

function sound_disconnect(*)
{
  set ~sound "weapons/mpg/out.wav"
  sp_sc_func_exec sound_play_exclude #~1 #~sound
}

function sound_section(~slot)
{
  set ~sound "dm/assassin/BadKill.wav"
  sp_sc_func_exec entSoundPlay #~slot #~sound 0 1 0.3
}

function sound_section_pb(~slot)
{
  set ~sound "dm/assassin/KillTarget.wav"
  sp_sc_func_exec entSoundPlay #~slot #~sound 0 1 0.5
}

function sound_lap_end(~slot)
{
  set ~sound "dm/ctf/FlagBase.wav"
  sp_sc_func_exec entSoundPlay #~slot #~sound 0 1 0.6
}

function sound_pb(~slot)
{
  sset ~msg slot $~slot made a personal best
  say #~msg
  set ~sound "dm/arsenal/BigWinner.wav"
  sp_sc_func_exec entSoundPlay #~slot #~sound 0 1 1
}

function sound_play_exclude(~slot, ~sound)
{
  set ~counter 0
  sp_sc_flow_while number cvar ~counter < val #maxclients
  {
    sp_sc_flow_if number cvar ~counter != val #~slot
    {
      sp_sv_info_client #~counter
      sp_sc_flow_if text cvar _sp_sv_info_client_ip != val ""
      {
        sp_sc_func_exec entSoundPlay #~counter #~sound 0 1 1
      }
    }
    add ~counter 1
  }
}
