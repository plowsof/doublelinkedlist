// on damage btrack
// - attempted c4 jumps?
//override default flag capture sound
//play our own depending on if a pb was made or not

//----------------------------------------
// BunnyTrack 
//----------------------------------------
function btrack_init()
{
  sp_sc_func_exec spf_sc_list_onchange_add_func _sp_sv_info_flag_blue "bt_flag_state"
  sp_sc_func_exec spf_sc_list_onchange_add_func _sp_sv_info_flag_red "bt_flag_state"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_map_begin "bt_map_begin"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_begin "bt_player_join_1"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_disconnect "bt_sound_disconnect"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_spawn "stopwatch"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_ctf_flag_capture "flagcap"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_map_end "mapend"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_die "bt_remove_trash"
  //sf_sv_sound_override "enemy/dth/*" "ignore.wav" ""
  //sf_sv_sound_override "impact/gore/*" "ignore.wav" ""
  //sf_sv_sound_override "impact/player/*" "ignore.wav" ""
}


function bt_remove_trash(*)
{
  echo "hello"
}

function bt_remove_trash_1()
{
  sf_sv_ent_find ~crap 436 "noclass"
  set ~counter 1
  sp_sc_flow_while number cvar ~counter <= val #~crap_0
  {
    sp_sc_cvar_copy ~ent ~crap_$~counter
    sf_sv_ent_remove #~ent
    add ~counter 1
  }
  sf_sv_ent_find ~crap 436 "item_weapon_pistol"
  set ~counter 1
  sp_sc_flow_while number cvar ~counter <= val #~crap_0
  {
    sp_sc_cvar_copy ~ent ~crap_$~counter
    sf_sv_ent_remove #~ent
    add ~counter 1
  }
  sp_sc_timer 250 "sp_sc_func_exec bt_remove_trash_1"
}
function bt_sound_disconnect(*)
{
  //play disc sound
  set ~slot $~1
  sp_sc_func_exec sound_play_exclude $~slot "weapons/mpg/out.wav"
}

function .rank(*)
{
  sp_sc_flow_if number cvar ~0 == val 1
  {
    set ~slot $~1
  }
  else
  {
    set ~slot $~2
  }
  sp_sv_info_client $~slot
  sp_sc_flow_if text cvar _sp_sv_info_client_ip != val ""
  {
    sp_sc_cvar_copy ~rank pydb_bt_rank_$~slot 
    sp_sc_cvar_copy ~time pydb_bt_time_$~slot  
    sp_sc_cvar_copy ~total pydb_bt_total_$~slot  
    sp_sc_cvar_copy ~saves pydb_bt_saves_$~slot  
    sp_sc_cvar_copy ~loads pydb_bt_loads_$~slot  
    sp_sc_cvar_copy ~seen pydb_bt_seen_$~slot
    sp_sc_cvar_sset ~msg   "%06~%03Map%06~%01      " #_sp_sv_info_map_current
    sp_sc_cvar_append_newline ~msg 
    sp_sc_cvar_append ~msg "%06~%03Name%06~%01     " #_sp_sv_info_client_name
    sp_sc_cvar_append_newline ~msg
    sp_sc_cvar_append ~msg "%06~%03Rank%06~%01     " #~rank
    sp_sc_cvar_append_newline ~msg
    sp_sc_cvar_append ~msg "%06~%03Time%06~%01     " #~time
    sp_sc_cvar_append_newline ~msg
    sp_sc_cvar_append ~msg "%06~%03Total%06~%01    " #~total
    sp_sc_cvar_append_newline ~msg
    sp_sc_cvar_append ~msg "%06~%03Saves%06~%01    " #~saves
    sp_sc_cvar_append_newline ~msg
    sp_sc_cvar_append ~msg "%06~%03Loads%06~%01    " #~loads
    sp_sc_cvar_append_newline ~msg
    sp_sc_cvar_append ~msg "%06~%031st Seen%06~%01 " #~seen
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_client $~1 #~msg
  }
  else
  {
    echo "enter a valid slot"
  }
}
function .top10(~slot)
{
  set ~counter 1
  echo "hello world"
  set ~spaces "                             "
  sp_sc_cvar_nbsp ~spaces ~spaces
  set ~line_0 3
  set ~counter 1
  set ~line_1 "|Name            |Time  |Saves|Loads|"
  set ~line_2 "|%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a|%9a%9a%9a%9a%9a%9a|%9a%9a%9a%9a%9a|%9a%9a%9a%9a%9a|"
  sp_sc_flow_while number cvar ~counter <= val 10
  {
    sp_sc_flow_if text cvar pydb_data_$~counter != val ""
    {

      //its set with data
      sp_sc_cvar_copy ~data pydb_data_$~counter
      sp_sc_cvar_split ~split "\" ~data
      set ~name $~split_1;sp_sc_cvar_unhex ~name ~name;sp_sc_cvar_append ~name #~spaces;
      echo "error?"
      set ~time $~split_2;sp_sc_cvar_append ~time #~spaces
      echo "time"
      set ~saves $~split_3;sp_sc_cvar_append ~saves #~spaces
      set ~loads $~split_4;sp_sc_cvar_append ~loads #~spaces
      set ~last_seen $~split_5
      sp_sc_cvar_substr ~sub_name ~name 0 16
      sp_sc_cvar_substr ~sub_time ~time 0 6
      sp_sc_cvar_substr ~sub_saves ~saves 0 5
      sp_sc_cvar_substr ~sub_loads ~loads 0 5
      sp_sc_cvar_sset ~line_$~line_0 "|" #~sub_name "|" #~sub_time "|" #~sub_saves "|" #~sub_loads "|"
      add ~line_0 1
    }
    add ~counter 1
  }
  set ~line_$~line_0 "%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a%9a"
  set ~counter 1
  set ~newline_after_chunk 1
  sset ~msg ""
  sp_sc_flow_while number cvar ~counter <= val $~line_0
  {
    sp_sc_cvar_copy ~l ~line_$~counter
    sp_sc_cvar_append ~msg #~l
    sp_sc_flow_if number cvar ~newline_after_chunk != val 3
    {
      sp_sc_cvar_append_newline ~msg
      add ~newline_after_chunk 1
    }
    else
    {
      set ~newline_after_chunk 1
    }
    
    add ~counter 1
    
  }
  sp_sc_cvar_unescape ~msg ~msg
  //i dont know the max cvar length :-$
  set ~chunk 113
  set ~begin 0
  sp_sc_cvar_len ~len ~msg
  sp_sc_cvar_list ~len
  sp_sc_flow_while number cvar ~begin < val #~len
  {
    sp_sc_cvar_list ~chunk
    sp_sc_cvar_list ~begin
    sp_sc_cvar_substr ~part ~msg $~begin #~chunk
    add ~begin $~chunk
    sp_sv_print_broadcast #~part
  }
}

function bt_flag_state(~cvar)
{
  // r00 d h 
  sp_sc_cvar_substr ~r $~cvar 0 1
  sp_sc_flow_if text cvar ~r == val "r"
  {
    sp_sc_cvar_substr ~bit $~cvar 1 1
    sp_sc_flow_if text cvar ~bit == val 0
    {
      sp_sc_cvar_substr ~slot $~cvar 2 1
    }
    else
    {
      sp_sc_cvar_substr ~slot $~cvar 1 2
    }
    sp_sc_func_exec bt_flagtake $~slot
    }
}


function bt_flagtake(~slot)
{
  set flag_taken_$~slot 1 
}

//----------------------------------------
function stopwatch(~slot)
{
  echo "stopwatch"
  sp_sc_flow_if number cvar btrack_saves_$~slot == val 0
  {
    sset ~msg "%03Type/bind %04.savepos%03 to save your position.%0a%04.loadpos %03 to load it%0a%04.loadprev %03 to load previous 4"
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_client $~slot #~msg
  }
  sp_sc_func_exec on_spawn_security_check $~slot
  sp_sc_flow_if number cvar btrack_start_frame_$~slot == val ""
  {
    sp_sv_info_frames
    set btrack_start_frame_$~slot #_sp_sv_info_frames
  }
  sp_sc_flow_if number cvar flag_taken_$~slot == val 1
  {
    echo "flag capped 1 reset"
    sp_sc_func_exec set_cvars $~slot
    
    sp_sv_info_frames
    set btrack_start_frame_$~slot #_sp_sv_info_frames
  }
  else
  {
    //reset timer if we have no saves/loads
    sp_sc_flow_if number cvar btrack_loads_$~slot == val 0
    {
      sp_sc_flow_if number cvar btrack_saves_$~slot == val 0
      {
      sp_sv_info_frames
      set btrack_start_frame_$~slot #_sp_sv_info_frames
      }
    }
  }
}

function bt_spawn_check_name(*)
{
  sp_sc_flow_if number cvar ~0 == val 1
  {
    sp_sv_info_client $~1
    set ~name #_sp_sv_info_client_name
    sp_sc_func_exec pydb_set_name #~name #~1 "bt_spawn_check_name"
  }
  else
  {
    set ~name #~1
    set ~slot #~2
    sp_sc_flow_if text cvar ~name != cvar pydb_name_join_$~slot
    {
      //'fake' join for cvar resets
      sp_sc_func_exec bt_player_join_1 $~slot "~"
    }
  }
}

function set_cvars(~slot)
{
  sp_sv_info_client $~slot
  set flag_taken_$~slot 0
  set flag_capped_$~slot 0
  set btrack_saves_$~slot 0
  set btrack_loads_$~slot 0
  set btrack_reset_$~slot 0
  set btrack_prev_pos_num_$~slot 1
  zero btrack_loadprev_pos_1_$~slot
  zero btrack_loadprev_pos_2_$~slot
  zero btrack_loadprev_pos_3_$~slot
  zero btrack_loadprev_pos_4_$~slot
  zero btrack_loadprev_pos_5_$~slot
  sf_sv_player_ent ~ent $~slot
  set bt_ent_slot_$~slot #~ent
  set btrack_team_$~slot #_sp_sv_info_client_team
  zero btrack_start_frame_$~slot
}

function bt_player_join_1(*)
{
  sp_sc_func_exec bt_player_join $~1
  sp_sc_flow_if number cvar ~0 == val 1
  {
    //real player begin (not cvar reset)
    sp_sc_func_exec bt_sound_begin $~1
  }
}
function bt_player_join(*)
{
    sp_sc_flow_if number cvar ~0 == val 1
    {
        //clear touched cvars
        set ~slot $~1
        sp_sc_func_exec set_cvars $~slot
        //sp_sc_func_exec reset_cvars $~slot
        //echo %22\\join\\
        sp_sv_info_client $~1
        set btrack_team_$~1 #_sp_sv_info_client_team
        set ~name #_sp_sv_info_client_name
        set pydb_bt_name_join_$~1 #~name
        sp_sc_func_exec pydb_set_name #~name #~1 "bt_player_join"
        //sp_sc_func_exec sound_begin $~1
    }
    else
    {
        set ~name #~1
        set ~slot #~2
        set pydb_name_join_$~slot #~name
        sp_sc_cvar_sset ~msg [%22\\bt_db\\%22,%22join%22,%22 $~name %22,%22 $~slot %22]
        sp_sc_cvar_unescape ~msg ~msg
        echo $~msg
    }
}

function pydb_set_name(~name,~slot,~return_to)
{
    sp_sc_cvar_no_color ~name ~name
    //remove spaces and .lower()
    sp_sc_cvar_replace ~name ~name %20: %41-%5a:%61-%7a
    sp_sc_flow_if text cvar ~name == val ""
    {
    set ~name "anonymous"
    }
    sp_sc_cvar_hex ~fname ~name
    sp_sc_func_exec $~return_to #~fname #~slot "~"
}

function bt_map_begin()
{
  //load pickled python dictionary for this map
  sp_sc_func_exec bt_set_map #_sp_sv_info_map_current
  sp_sc_func_exec bt_register_sounds
  sp_sc_func_exec bt_make_top10
  //override currently broken

  set btrack_mapend 0
}
function .rems(~slot)
{
  sp_sc_func_exec sf_remove_sound "*"
  sp_sc_func_exec sf_remove_sound "enemy/dth/*"
  sp_sc_func_exec sf_remove_sound "impact/gore/*"
  sp_sc_func_exec sf_remove_sound "impact/player/*"
}
function bt_set_map(~mapname)
{
  sp_sc_cvar_split ~split "/" ~mapname
  set ~mapname $~split_2
  set GLOBAL_bt_mapname #~mapname
  sp_sc_cvar_sset ~msg [%22\\bt_db\\%22,%22map_change%22,%22 $~mapname %22]
  sp_sc_cvar_unescape ~msg ~msg
  echo $~msg
  sp_sc_func_exec bt_make_top10
}

function bt_register_sounds()
{
  sf_sv_sound_register "impact/whip/swing.wav"
  sf_sv_sound_register "impact/whip/hit.wav"
  sf_sv_sound_register "weapons/mpg/pullout.wav"
  sf_sv_sound_register "weapons/mpg/out.wav"
}

function bt_make_top10()
{
    //cfg_name = "top10-" + mapname + ".cfg"
    set ~counter 1
    sp_sc_flow_while number cvar ~counter <= val 10
    {
      zero pydb_data_$~counter
      add ~counter 1
    }
    sp_sc_cvar_sset ~cfg "sofplus/data/btrack/top10-" #GLOBAL_bt_mapname ".cfg" 
    sp_sc_exec_file #~cfg
}

function pydb_set_name(~name,~slot,~return_to)
{
    sp_sc_cvar_no_color ~name ~name
    //remove spaces and .lower()
    sp_sc_cvar_replace ~name ~name %20: %41-%5a:%61-%7a
    sp_sc_flow_if text cvar ~name == val ""
    {
    set ~name "anonymous"
    }
    sp_sc_cvar_hex ~fname ~name
    sp_sc_func_exec $~return_to #~fname #~slot "~"
}

//----------------------------------------
// Detect team change and reset saved position
//----------------------------------------
function on_spawn_security_check(~slot)
{
  //swap teams zero cvars <prevent swap team, load pos to enemy spawn>
  sp_sv_info_client $~slot
  sp_sc_flow_if number cvar _sp_sv_info_client_team != cvar btrack_team_$~slot
  {
    echo "failed security check of team"
    sp_sc_func_exec set_cvars $~slot
  }
  //also check names 
  sp_sc_func_exec bt_spawn_check_name $~slot
}
//----------------------------------------
// Save position
//----------------------------------------
function .savepos(*)
{
  sp_sc_flow_if number cvar btrack_mapend == val 0
  {
    set ~slot #~1
    set btrack_prev_pos_num_$~slot 1
    //Get slots x y z coordinates
    sp_sc_func_exec getOrigin #~slot
    set ~o_x #GLOBAL_get_origin_x
    set ~o_y #GLOBAL_get_origin_y
    set ~o_z #GLOBAL_get_origin_z
    //Get angles
    sp_sc_func_exec getAngles #~slot
    set ~a_x #GLOBAL_get_angles_x
    set ~a_y #GLOBAL_get_angles_y
    
    sp_sc_cvar_sset ~saveData #~o_x ":" #~o_y ":" #~o_z ":" #~a_x ":" #~a_y
    //sp_sc_cvar_list ~saveData
    
    //total_saves_slot += 1
    add btrack_saves_$~slot 1
    //color the player quickly so others see we saved
    sf_sv_player_paint #~slot 0 1 0 1
    sset ~cmd sf_sv_player_paint #~slot 1 1 1 1 
    sp_sc_timer 130 #~cmd

    //STRING PACKAGE 56
    //sp_sv_print_sp_client #~slot 56
    sp_sc_cvar_copy ~saves btrack_saves_$~slot 
    sp_sc_cvar_sset ~msg "%03Position Saved! %06~%02[%03" #~saves "%02]%06~"
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_client $~slot #~msg


    set ~counter 1
    set ~new_data #~saveData
    sp_sc_flow_while number cvar ~counter <= val 5
    {
      set ~below #~counter
      add ~below 1
      sp_sc_cvar_sset ~prev_cvar btrack_loadprev_pos_$~counter _$~slot
      sset ~msg copy $~prev_cvar 
      sp_sc_cvar_copy ~prev $~prev_cvar
      set ~continue 1
      sp_sc_flow_if text cvar ~prev == val ""
      {
        sp_sc_flow_if number cvar ~counter == val 1
        {
          set $~prev_cvar #~new_data
          set ~continue 0
        }
      }
      else
      {
        set ~continue 1
      }
      sp_sc_flow_if number cvar ~continue == val 1
      {
        //~prev = old 1
        //replace ~prev with new value but save before doing it
        set ~saved #~prev
        set $~prev_cvar #~new_data
        sp_sc_cvar_sset ~new_data btrack_loadprev_pos_$~below _$~slot
        set ~new_data #~saved
      }
      else
      {
        set ~counter 6
      }
      add ~counter 1
    }
    sp_sc_func_exec bt_sound_save $~slot
  }
  else
  {
    //maybe to stop spamming save sound at end of map
    echo "map ended"
  }
}

//----------------------------------------
// Load position
//----------------------------------------
function .loadpos(*)
{
  set ~slot #~1
  sp_sc_flow_if number cvar flag_taken_$~slot == val 0
  {
    sp_sc_flow_if number cvar btrack_mapend == val 0
    {
      sp_sc_flow_if number cvar flag_capped_$~slot == val 0
      {
        sp_sc_flow_if text cvar btrack_loadprev_pos_1_$~slot != val ""
        {
          //refuse to load if nothing saved
          //teleport to saved x y z
          sp_sc_cvar_split ~tmp ":" btrack_loadprev_pos_1_$~slot
          //reset velocity
          sp_sc_func_exec zeroVel #~slot
          //teleport player
          sp_sc_func_exec setOrigin #~slot #~tmp_1 #~tmp_2 #~tmp_3
          //reset viewangles (currently only YAW is set)
          //sset ~msg "tmp4:" #~tmp_4 "tmp5:" #~tmp_5
          //echo #~msg
          //sp_sc_func_exec setAngles #~slot #~tmp_4 #~tmp_5
          //Sound to client
          sp_sc_func_exec bt_sound_load $~slot
          //total_load_slot += 1
          add btrack_loads_$~slot 1

          //STRING PACKAGE 57
          //sp_sv_print_sp_client #~slot 57
          sp_sc_cvar_copy ~loads btrack_loads_$~slot 
          sp_sc_cvar_sset ~msg "%03Position Loaded! %06~%02[%03" #~loads "%02]%06~"
          sp_sc_cvar_unescape ~msg ~msg
          sp_sv_print_client $~slot #~msg
        }
        else
        {
          sset ~msg "you've not used .savepos"
          sp_sv_print_client $~slot #~msg
          //sp_sv_print_sp_client #~slot 60
        }
      }

    }
  } 
}

//----------------------------------------------------------
// Loop the 5 previous saved positions incase of an accident
//----------------------------------------------------------
function .loadprev(*)
{
  //sending is to 000
  set ~slot #~1
  sp_sc_flow_if number cvar flag_taken_$~slot == val 0
  {
    sp_sc_flow_if number cvar btrack_mapend == val 0
    {
      sp_sc_flow_if number cvar flag_capped_$~slot == val 0
      {
        sp_sc_cvar_copy ~num btrack_prev_pos_num_$~slot
        sp_sc_flow_if number cvar ~num == val 1
        {
          set btrack_prev_pos_num_$~slot 2;set ~num 2
        }
        sp_sc_flow_if number cvar ~num == val 6
        {
          set btrack_prev_pos_num_$~slot 2;set ~num 2
        }
        sp_sc_cvar_list ~num
        sp_sc_cvar_sset ~cvar btrack_loadprev_pos_$~num _$~slot
        sp_sc_cvar_copy ~tmp $~cvar
        sp_sc_flow_if text cvar ~tmp == val ""
        {
          set btrack_prev_pos_num_$~slot 2;set ~num 2
        }
        sp_sc_cvar_list ~num
        sp_sc_cvar_sset ~cvar btrack_loadprev_pos_$~num _$~slot
        sp_sc_cvar_copy ~tmp $~cvar
        sp_sc_cvar_split ~tmp ":" $~cvar
        //reset velocity
        sp_sc_func_exec zeroVel #~slot
        //teleport player
        sp_sc_func_exec setOrigin #~slot #~tmp_1 #~tmp_2 #~tmp_3
        //sp_sc_func_exec setAngles #~slot #~tmp_4 #~tmp_5
        add btrack_loads_$~slot 1
        //STRING PACKAGE 58
        //sp_sv_print_sp_client #~slot 58
        sp_sc_func_exec bt_sound_load $~slot

        sp_sc_cvar_copy ~loads btrack_loads_$~slot 
        sp_sc_cvar_sset ~msg "%03Position Loaded! %06~%02[%03" #~loads "%02]%06~"
        sp_sc_cvar_unescape ~msg ~msg
        sp_sv_print_client $~slot #~msg
        add btrack_prev_pos_num_$~slot 1
        sp_sc_flow_if number cvar btrack_prev_pos_num_$~slot == val 6
        {
          set btrack_prev_pos_num_$~slot 2
        }
      }
    }
  }
}
function pydb_bt_broadcast_new_rank(pydb_name,pydb_new_rank,pydb_slot,pydb_broadcast)
{
  sp_sc_flow_if number cvar pydb_broadcast == val 1
  {
    //~temp cvars are deleted when rcon status packet calls this function
    sp_sc_cvar_unhex pydb_name pydb_name
    sp_sc_cvar_sset ~msg #pydb_name " %03 is now ranked %06~%03[%02" #pydb_new_rank "%03]%06~"
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_broadcast #~msg
  }
  set pydb_bt_rank_$pydb_slot $pydb_new_rank
}
function pydb_bt_set_begin_cvars(bt_slot,bt_time,bt_rank,bt_saves,bt_loads,bt_total,bt_seen)
{
  //saves + loads that you did on your best time run
  set pydb_bt_rank_$bt_slot #bt_rank
  set pydb_bt_time_$bt_slot #bt_time
  set pydb_bt_total_$bt_slot #bt_total
  set pydb_bt_saves_$bt_slot #bt_saves
  set pydb_bt_loads_$bt_slot #bt_loads
  set pydb_bt_seen_$bt_slot #bt_seen
}
//----------------------------------------------
// Reset save pos and stopwatch on flag capture
//----------------------------------------------
function flagcap(*)
{
  //we cant capture twice quickly before dieing ~
  sp_sc_flow_if number cvar flag_capped_$~slot != val 1
  {

    set ~slot #~1
    add pydb_bt_total_$~slot 1 
    //on spawn - will check if flag capped is 1 and reset all cvars
    set flag_capped_$~slot 1
    sp_sv_info_frames
    set ~frames #_sp_sv_info_frames
    sp_sc_cvar_copy ~start btrack_start_frame_$~slot
    zero btrack_start_frame_$~slot
    sp_sc_cvar_math_sub ~frames #~start
    //if frames < pb its a new pb
    sp_sv_info_client $~slot
    set ~name #_sp_sv_info_client_name
    sp_sc_flow_if number cvar ~frames < cvar pydb_bt_time_$~slot
    {
      //we've made a pb
      set ~new $~frames
      sp_sc_cvar_copy ~old pydb_bt_time_$~slot
      add ~old -$~new
      sp_sc_cvar_sset ~msg #~name " %03beat their old time by %06~%03[%02" $~old "%03]%06~%03 " "Time:%06~%03[%02" #~frames "%03]%06~"
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_broadcast #~msg 
      set pydb_bt_time_$~slot #~frames
    }
    else
    {
      sp_sc_cvar_sset ~msg #~name " %03 Finished with a time of: %06~%03[%02" #~frames "%03]%06~"
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_broadcast #~msg 
    }
    
    sp_sc_cvar_copy ~loads btrack_loads_$~slot
    sp_sc_cvar_copy ~saves btrack_saves_$~slot
    sp_sc_cvar_copy ~name pydb_name_join_$~slot
    sp_sc_flow_if text cvar ~loads == val ""
    {
      set ~loads 0
    }
    sp_sc_flow_if text cvar ~saves == val ""
    {
      set ~saves 0
    }
    sp_sc_func_exec bt_timed_event_completed #~name #~frames #~slot #~loads #~saves
  }
}

function bt_timed_event_completed(~name,~time,~slot,~loads,~saves)
{
  sp_sc_cvar_sset ~line [%22\\bt_db\\%22,%22bt_finish%22,%22 $~name %22,%22 $~time %22,%22 $~slot %22,%22 $~loads %22,%22 $~saves %22]
  sp_sc_cvar_unescape ~line ~line
  echo $~line
  sp_sc_flow_if number cvar pydb_bt_rank_$~slot <= val 10
  {
    sp_sc_func_exec bt_make_top10
  }
}

//--------------------------------------------
// Reset Cvars
//--------------------------------------------
function reset_cvars(*)
{
  sp_sc_func_exec set_cvars $~1
}

function .help(*)
{
  set ~slot #~1
  sp_sv_print_sp_client #~slot 55
}

function mapend()
{
  set btrack_mapend 1
}

//------------------------------
// Extra helpers to reduce crap
//------------------------------
//set angles not functional 
function setOrigin(~slot,~x,~y,~z)
{
  sf_sv_player_ent ~ent #~slot
  sf_sv_vector_set ~vec $~x $~y $~z
  sf_sv_ent_field_set #~ent origin ~vec
}

function getOrigin(~slot)
{
  sp_sc_cvar_copy ~ent bt_ent_slot_$~slot
  sf_sv_ent_field_get ~out #~ent origin
  set GLOBAL_get_origin_x #~out_1
  set GLOBAL_get_origin_y #~out_2
  set GLOBAL_get_origin_z #~out_3
}

function getAngles(~slot)
{
  sp_sc_cvar_copy ~ent_p bt_ent_slot_$~slot
  sf_sv_ent_field_get ~out #~ent_p viewangles
  set GLOBAL_get_angles_x #~out_1
  set GLOBAL_get_angles_y #~out_2
}


function zeroVel(~slot)
{
  sp_sc_cvar_copy ~ent bt_ent_slot_$~slot
  sf_sv_vector_set ~vec 0 0 0
  sf_sv_ent_field_set #~ent velocity ~vec
}

function bt_entSoundPlay(~slot,~sound,~atten,~clbool,~vol)
{
  set ~ch 0
  sp_sv_info_client $~slot
  sp_sc_flow_if text cvar _sp_sv_info_client_ip != val ""
  {
    sf_sv_player_ent ~ent #~slot
    sf_sv_sound_play_ent #~sound #~ent #~ch #~vol #~atten #~clbool
  }
}

function bt_sound_load(~slot)
{
  sp_sc_func_exec bt_entSoundPlay $~slot "impact/whip/hit.wav" 1 0 0.5
}
function bt_sound_save(~slot)
{
  sp_sc_func_exec bt_entSoundPlay $~slot "impact/whip/swing.wav" 1 0 0.5
}

function bt_sound_begin(~slot)
{
  sp_sc_func_exec bt_entSoundPlay $~slot "weapons/mpg/Pullout.wav" 1 0 1
}

//play sound to everyone but ~slot
function sound_play_exclude(~slot, ~sound)
{
  set ~counter 0
  sp_sc_flow_while number cvar ~counter < val #maxclients
  {
    sp_sc_flow_if number cvar ~counter != val #~slot
    {
      sp_sv_info_client #~counter
      sp_sc_flow_if text cvar _sp_sv_info_client_ip != val ""
      {
        sp_sc_func_exec entSoundPlay #~counter #~sound 0 1 1
      }
    }
    add ~counter 1
  }
}

function sf_remove_sound(~sound)
{
  sp_sc_cvar_sset ~cmd "sp_sc_file_find ~dir sound/" $~sound " pak filesystem file recursive"
  $~cmd
  set ~counter 1
  sp_sc_flow_while number cvar ~counter <= cvar ~dir_0
  {
    sp_sc_cvar_copy ~rem ~dir_$~counter
    sp_sc_cvar_substr ~sfile ~rem 6 999999
    sset ~msg "Removing:" #~sfile
    echo #~msg
    sf_sv_sound_remove #~sfile
    add ~counter 1
  }
}


function -setAngles(*) 
{
  set ~slot #~1
  echo "Set angles"
  set ~x #~2
  set ~y #~3
  sf_sv_player_ent ~who #~slot
  sf_sv_vector_set ~desired #~x #~y 0
  sf_sv_ent_field_get ~resp_ang #~who respawn_angles
  sp_sc_cvar_math_sub ~desired_1 ~resp_ang_1
  sp_sc_cvar_math_sub ~desired_2 ~resp_ang_2
  echo "lol"
  sp_sc_cvar_math_mul ~desired_1 182.04
  sp_sc_cvar_math_mul ~desired_2 182.04
  sf_sv_ent_field_set #~who delta_angles ~desired
}
